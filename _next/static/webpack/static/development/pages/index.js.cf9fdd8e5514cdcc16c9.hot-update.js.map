{"version":3,"file":"static/webpack/static/development/pages/index.js.cf9fdd8e5514cdcc16c9.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["\"use strict\";\n\nimport React, { useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Ad from \"../src/Ad\";\nimport Hint from \"../src/Hint\";\nimport Service from \"../src/Service\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  main: {\n    marginTop: theme.spacing(2),\n  },\n  table: {\n    marginTop: theme.spacing(1),\n  },\n  formField: {\n    width: \"200px\",\n  },\n  spinner: {\n    display: \"flex\",\n    position: \"absolute\",\n    zIndex: 1,\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\n// load initial data for static rendering\nexport async function getStaticProps() {\n  const initialData = await Service.getAllVehicles();\n  return {\n    props: {\n      initialData\n    }\n  }\n}\n\nfunction App({initialData}) {\n  const classes = useStyles();\n\n  const [makes, setMakes] = useState(Service.getVehicleMakes());\n  const [models, setModels] = useState([]);\n  const [make, setMake] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [year, setYear] = useState(\"\");\n  const [data, setData] = useState(initialData); // set initial data into state\n  const [loading, setLoading] = useState(false);\n\n  const handleMakeChange = (event) => {\n    setMake(event.target.value);\n    loadData(event.target.value, null, true);\n    if (!event.target.value) {\n      // no make selected, clear models\n      setModels([]);\n    }\n  };\n\n  const handleModelChange = (event) => {\n    setModel(event.target.value);\n    loadData(make, event.target.value, false);\n  };\n\n  const loadModels = (data) => {\n    let modelMap = new Map();\n    data.forEach((element) => {\n      if (element.Model) {\n        // parse model identifier\n        let model = element.Sort.split(\"-\")[0];\n        modelMap.set(element.Model, model);\n      }\n    });\n    // create array for data\n    let models = [];\n    modelMap.forEach(function (value, key) {\n      models.push({ key: value, value: key });\n    });\n    setModels(models);\n  };\n\n  const loadData = (make, model, shouldLoadModels) => {\n    setData([]);\n    if (make) {\n      setLoading(true);\n      var uri = make;\n      if (model) {\n        uri += \"/\" + model;\n      }\n      fetch(\"http://localhost:8000/vehicles/\" + uri)\n        // fetch(\"https://hofpnvfyu2.execute-api.us-east-1.amazonaws.com/vehicles/\" + uri)\n        .then((res) => res.json())\n        .then((data) => {\n          setData(data);\n          if (shouldLoadModels) {\n            loadModels(data);\n          }\n          setLoading(false);\n        })\n        .catch(console.log);\n    } else {\n      // set back to initial data\n      setData(initialData)\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Container component=\"main\" className={classes.main} maxWidth=\"lg\">\n        <Grid container spacing={2}>\n          <Grid item>\n            <Typography variant=\"h5\" component=\"h1\" gutterBottom>\n              Electric Vehicle Search\n            </Typography>\n          </Grid>\n          <Grid item>\n            <FormControl variant=\"outlined\">\n              <InputLabel htmlFor=\"make\">Make</InputLabel>\n              <Select\n                native\n                value={make}\n                onChange={handleMakeChange}\n                label=\"Make\"\n                inputProps={{\n                  id: \"make\",\n                }}\n              >\n                <option aria-label=\"None\" value=\"All\" />\n                {makes.sort().map((x, index) => {\n                  return (\n                    <option key={x} value={x}>\n                      {x}\n                    </option>\n                  );\n                })}\n              </Select>\n            </FormControl>\n            <FormControl variant=\"outlined\" className={classes.formField}>\n              <InputLabel htmlFor=\"model\">Model</InputLabel>\n              <Select\n                native\n                value={model}\n                onChange={handleModelChange}\n                disabled={models.length === 0}\n                label=\"Model\"\n                inputProps={{\n                  id: \"model\",\n                }}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                {models.sort().map((x) => {\n                  return (\n                    <option key={x.key} value={x.key}>\n                      {x.value}\n                    </option>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"subtitle1\">\n              Research electric vehicles with the most up-to-date specifications\n              from Tesla, Audi, Rivian, Ford, Volkswagen, Polestar, Volvo, BMW,\n              and other battery electric vehicle (BEV) automakers.\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <div className={classes.spinner}>{loading && <CircularProgress />}</div>\n\n        <div className={classes.table}>\n          <MaterialTable\n            columns={[\n              {\n                title: \"Make\",\n                field: \"Make\",\n                headerStyle: { whiteSpace: \"nowrap\" },\n                defaultSort: \"asc\"\n              },\n              {\n                title: \"Model\",\n                field: \"Model\",\n                headerStyle: { whiteSpace: \"nowrap\" }\n              },\n              {\n                title: \"Year\",\n                field: \"Year\",\n                type: \"numeric\",\n                width: 50,\n                headerStyle: { whiteSpace: \"nowrap\" },\n              },\n              {\n                title: \"Trim\",\n                field: \"Variant\",\n                headerStyle: { whiteSpace: \"nowrap\" },\n              },\n              {\n                title: \"Range (mi)\",\n                field: \"Range\",\n                type: \"numeric\",\n                width: \"1%\",\n                headerStyle: { whiteSpace: \"nowrap\" },\n              },\n              {\n                title: \"Accel (0-60)\",\n                field: \"Accel\",\n                type: \"numeric\",\n                width: \"1%\",\n                headerStyle: { whiteSpace: \"nowrap\" },\n              },\n              {\n                title: \"Power (hp)\",\n                field: \"PowerHP\",\n                type: \"numeric\",\n                width: \"1%\",\n                headerStyle: { whiteSpace: \"nowrap\" },\n              },\n              {\n                title: \"Torque\",\n                field: \"Torque\",\n                type: \"numeric\",\n                headerStyle: { whiteSpace: \"nowrap\" },\n                width: \"1%\",\n              },\n            ]}\n            data={data}\n            options={{\n              draggable: false,\n              sorting: true,\n              search: true,\n              padding: \"dense\",\n              showTitle: false,\n              toolbar: true,\n              paging: false,\n              headerStyle: {\n                backgroundColor: \"#1976d2\",\n                color: \"#FFF\",\n              },\n              searchFieldAlignment: \"left\",\n              rowStyle: (rowData, index) => {\n                if (index % 2) {\n                  return { backgroundColor: \"#f2f2f2\" };\n                }\n              },\n            }}\n            localization={{\n              body: {\n                emptyDataSourceMessage:\n                  'Select a \"Make\" and \"Model\" to research electric vehicle data',\n              },\n              toolbar: {\n                searchPlaceholder: \"Find within results\",\n              },\n            }}\n          />\n        </div>\n        <Hint />\n        {/* <Ad /> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAdA;AAAA;AACA;AAiCA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AADA;AAIA;AACA;AADA;AALA;AA1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;AACA;;;;A","sourceRoot":""}